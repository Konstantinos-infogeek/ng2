#!/usr/bin/env node

/*
 * Module dependencies.
 */

var spawn = require('child_process').spawn;
var cli = require('commander');
var join = require('path').join;
var pkg = require('../package.json');
var version = pkg.version;
var colors = require('colors');
var utils = require('../lib/utils');
var readdir = require('fs').readdirSync;
var info = utils.info;
var log = utils.log;
var error = utils.error;
var root = process.cwd();
var bootstrapper = require('../lib/bootstrapper');
var args = process.argv.splice(2);

if(args[0] === '-v' || args[0] === '--version') {
  console.log(version);
  process.exit(0);
}

log("It works if it ends with OK");

// setup process end message
process.on('exit', function (code) {
  if(code===0) {
    log("OK".green.bold);
  } else {
    error("NOT OK".red.bold);
  }
});

process.abort = function (message) {
  message && error(message);
  process.exit(1);
}

// get plugins
var bins = readdir(__dirname).filter(function (bin) {
  return /^ng2-/.test(bin);
});

info('Found plugins:');
info();
bins = bins.map(function (bin) {
  info('        *',bin);
  return bin.replace('ng2-','');
});
info();

var generators = bins.filter(function (bin) {
  if(bin==='module' || bin === 'server') return;
  return bin;
});

if(args[0] === '-h' || args[0] === '--help') {
  help();
  process.exit(0);
}

info('ng2 invoked with parameters:');
info();
args.forEach(function (param) {
  info('        *', param);
});
info();

if(!args.length) {
  log('Starting new app at', root);
  bootstrapper.start(root);
} else {
  var command = args[0];
  var isCommand = bins.indexOf(command) !== -1;

  if(isCommand) {
    // loose the command from the args
    args.splice(0,1);
    info("Invoking", command, "with", args);

    spawn('ng2-'+command, args, { stdio: 'inherit' })
      .on('exit', function (code) {
        code !== 0 && process.abort();
      });
  } else {
    var path = args.shift() || '.';
    path = join(root, path);
    log('Starting new app at', path);
    bootstrapper.start(path);
  }
}

function help () {
  log("Usage:");
  log();
  log("  ng2 <app-name> [options]");
  log();
  log("    Create a folder <app-name> and start a new application inside.");
  log("    If a <path> is specified then it will start it in such path");
  log("    and the application name will be the name of the last directory.");
  log();
  log();
  log("  ng2 module [options] <module-name>");
  log();
  log("    Scaffold a new module named <module-name>.");
  log();
  log();
  log("  ng2 <module-name> [generator] [options] [params [, more params]]");
  log();
  log("    It will use one of the following generators within the specified");
  log("    module named <module-name>.");
  log();
  log();
  log("Generators:");
  generators.forEach(function (bin) {
    log("    *",bin);
  });
  log();
  log("Plugins: (generators are plugins, too)");
  bins.forEach(function (bin) {
    log("    *",bin);
  });
  log();
  log("For additional help on any plugin, use the --help flag");
  log("like this:", "ng2 <plugin-name> --help");
  log()
}