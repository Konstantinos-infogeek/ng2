#!/usr/bin/env node

var cli     = require('commander')
  , path    = require('path')
  , pkg     = require('../package.json')
  , version = pkg.version
  , colors  = require('colors')

var ng2 = require('ng2')
  , anchorman = require('anchorman');

anchorman.on('log', function  (data) {
  if(typeof data === 'object') {
    data = JSON.stringify(data, null,4);
  }
  console.log('log: '.cyan, data.grey);
});

anchorman.on('error', function  (data) {
  if(typeof data === 'object') {
    data = JSON.stringify(data, null,4);
  }
  console.log('error: '.red.bold, data.red);
  process.exit(-1);
});

anchorman.on('info', function  (data) {
  if(typeof data === 'object') {
    data = JSON.stringify(data, null,4);
  }
  if(cli.verbose) {
    console.log('info: '.magenta, data.grey);
  }
});

ng2.reporter = anchorman;
ng2.bootstrap();

cli
  .version(version)
  .option('-v, --verbose', 'verbose mode')
  .option('-p, --port', 'the server port');

cli
  .command('start <name>')
  .description('\t\tscaffold a barebones app'.grey)
  .action(function (name) {
    ng2.start(name);
  });

cli
  .command('module <username/name>')
  .description('\t\tscaffold a module'.grey)
  .action(function (name) {
    ng2.module(name);
  });

cli
  .command('controller <name>')
  .description('\t\tscaffold a controller'.grey)
  .action(function (name) {
    ng2.scaffold('controller',name);
    ng2.scaffold('view',name);
  });

cli
  .command('directive <name>')
  .description('\t\tscaffold a directive'.grey)
  .action(function (name) {
    ng2.scaffold('directive',name);
  });

cli
  .command('filter <name>')
  .description('\t\tscaffold a filter'.grey)
  .action(function (name) {
    ng2.scaffold('filter',name);
  });

cli
  .command('provider <name>')
  .description('\t\tscaffold a provider'.grey)
  .action(function (name) {
    ng2.scaffold('provider',name);
  });

cli
  .command('service <name>')
  .description('\t\tscaffold a service'.grey)
  .action(function (name) {
    ng2.scaffold('service',name);
  });

cli
  .command('test <type> <name>')
  .description('\t\tscaffold a test'.grey)
  .action(function (type, name) {
    ng2.scaffold('test-'+type,name);
  });

cli
  .command('view <name>')
  .description('\t\tscaffold a view'.grey)
  .action(function (name) {
    ng2.scaffold('view',name);
  });

cli
  .command('style <name>')
  .description('\t\tscaffold a stylesheet'.grey)
  .action(function (name) {
    ng2.scaffold('style',name);
  });

cli
  .command('script <name>')
  .description('\t\tscaffold a script'.grey)
  .action(function (name) {
    ng2.scaffold('script',name);
  });

cli
  .command('resource <name>')
  .description('\t\tscaffold a full resource'.grey)
  .action(function (name) {
    ng2.scaffold('controller',name+'-list');
    ng2.scaffold('controller',name+'-detail');
    ng2.scaffold('controller',name+'-edit');
    ng2.scaffold('view',name+'-list');
    ng2.scaffold('view',name+'-detail');
    ng2.scaffold('view',name+'-edit');
    ng2.scaffold('resource',name);
  });

cli
  .command('build')
  .description('\t\tbuild the project'.grey)
  .action(function () {
    ng2.build();
  });

cli
  .command('watch')
  .description('\t\tcontinuous watch and build'.grey)
  .action(function () {
    ng2.watch();
  });

cli
  .command('server')
  .description('\t\trun a local webserver'.grey)
  .action(function () {
    ng2.server(cli.port)
  })

cli.parse(process.argv);